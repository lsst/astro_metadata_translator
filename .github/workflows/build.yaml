name: build_and_test

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v5
        with:
          # Need to clone everything to determine version from git.
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "setup.cfg"

      - name: Install debian packages
        run: sudo apt-get install graphviz

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      # We have two cores so we can speed up the testing with xdist
      - name: Install xdist and openfiles
        run: uv pip install --system pytest-xdist pytest-cov

      - name: Install dependencies
        run: uv pip install --system -r requirements.txt

      - name: Build and install
        run: uv pip install --system -v --no-deps -e .

      - name: Run tests
        run: |
          pytest -r a -v -n 3 --cov=astro_metadata_translator --cov=tests --cov-report=xml --cov-report=term --cov-branch \
            --junitxml=junit.xml -o junit_family=legacy

      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Install documenteer
        run: uv pip install --system -r doc/requirements.txt

      - name: Build documentation
        if: ${{ matrix.python-version == '3.11' }}
        run: package-docs build -n -W

      - name: Landing page upload
        if: ${{ github.event_name == 'push' && matrix.python-version == '3.11' }}
        uses: lsst-sqre/ltd-upload@v1
        with:
          project: 'astro-metadata-translator'
          dir: 'doc/_build/html'
          password: ${{ secrets.LTD_PASSWORD }}
          username: ${{ secrets.LTD_USERNAME }}

  check-changes:
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Check if weekly changed
        id: check
        run: |
          # Get SHA hashes for all weekly tags
          weekly_sha=$(git tag -l 'w.*' | while read tag; do
            git rev-list -n 1 "${tag}"
          done)

          echo "Weekly tag SHA ${weekly_sha}"
          # Extract the current tag and its SHA
          current_tag=${GITHUB_REF#refs/tags/}
          echo "Current tag: ${current_tag}"
          current_sha=$(git rev-list -1 "${current_tag}") || echo "no_value"
          echo "Current sha: ${current_sha}"
          # Count occurrences of the current SHA in the weekly SHA list
          n=$(echo "${weekly_sha}" | grep -c "${current_sha}") || echo "0"
          echo "Current tag ${current_tag} (${current_sha}) SHA found ${n} time(s)"

          # Determine whether to skip the upload based on the count
          if [ "${n}" -gt 1 ]; then
            echo "Skip upload"
            echo "skip=true" >> "${GITHUB_OUTPUT}"
          else
            echo "Enable upload"
            echo "skip=false" >> "${GITHUB_OUTPUT}"
          fi

  pypi:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    needs: [build_and_test, check-changes]
    permissions:
      id-token: write
    if: "${{ ! startsWith(github.ref, 'refs/tags/w.') || needs.check-changes.outputs.skip == 'false' }}"

    steps:
      - uses: actions/checkout@v5
        with:
          # Need to clone everything to embed the version.
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "setup.cfg"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel build

      - name: Build and create distribution
        run: |
          python -m build --sdist --wheel

      - name: Upload
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_UPLOADS }}
